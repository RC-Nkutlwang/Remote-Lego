#include <WiFiNINA.h>
// Pin definitions
const int motorPin1 = 5; // Connected to IN1
const int motorPin2 = 6; // Connected to IN2
const int enablePin = 9; // Connected to ENA (PWM pin)

// Wi-Fi network credentials
char ssid[] = "your_SSID"; // name of the WiFi to connect to
char pass[] = "your_PASSWORD"; // Wi-Fi password

WiFiServer server(80); // Web server on port 80

// Setup function runs once when the board starts
void setup() {
  // Initialize serial for debugging
  Serial.begin(9600);  
  // Initialize the motor control pins as outputs
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(enablePin, OUTPUT);

  // Set initial motor direction and stop motor
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  analogWrite(enablePin, 0);

  // Set initial state to stopped
  stopMotor();

  // Connect to Wi-Fi network
  connectToWiFi();

  // Start the web server
  server.begin();
}

void loop() {
  // Listen for incoming clients
  WiFiClient client = server.available();

  if (client) {
    Serial.println("New Client.");

    // Read the client's request
    String currentLine = "";
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        if (c == '\n') {
          if (currentLine.length() == 0) {
            // Send a standard HTTP response header
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            // Handle the commands
            if (client.available()) {
              String request = client.readStringUntil('\r');
              Serial.print("Request: ");
              Serial.println(request);
              handleRequest(request);
            }

            // Break out of the loop
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }

    // Close the connection
    client.stop();
    Serial.println("Client Disconnected.");
  }
}

void connectToWiFi() {
  Serial.print("Connecting to ");
  Serial.println(ssid);
  while (WiFi.begin(ssid, pass) != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("Connected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

void handleRequest(String request) {
  // Example request: /control?speed=128&direction=forward

  // Parse the speed
  int speedStart = request.indexOf("speed=") + 6;
  int speedEnd = request.indexOf("&", speedStart);
  int speed = request.substring(speedStart, speedEnd).toInt();

  // Parse the direction
  int directionStart = request.indexOf("direction=") + 10;
  String direction = request.substring(directionStart);

  // Set motor speed and direction
  setMotorSpeedAndDirection(speed, direction);
}

void setMotorSpeedAndDirection(int speed, String direction) {
  if (direction == "forward") {
    digitalWrite(motorPin1, HIGH);
    digitalWrite(motorPin2, LOW);
  } else if (direction == "backward") {
    digitalWrite(motorPin1, LOW);
    digitalWrite(motorPin2, HIGH);
  }

  // Set the motor speed (PWM value)
  analogWrite(enablePin, speed);
}

void stopMotor() {
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  analogWrite(enablePin, 0);
}