#include <WiFiNINA.h>

// Pin definitions
const int motorPin1 = 5; // Connected to IN1
const int motorPin2 = 6; // Connected to IN2
const int enablePin = 9; // Connected to ENA (PWM pin)

// Wi-Fi network credentials
char ssid[] = "VM217FC8"; // name of the WiFi to connect to
char pass[] = "zHebgu8rpqhh"; // Wi-Fi password

WiFiServer server(80); // Web server on port 80

void setup() {
  Serial.begin(9600);  
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(enablePin, OUTPUT);

  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  analogWrite(enablePin, 0);

  connectToWiFi();
  server.begin();
}

void loop() {
  WiFiClient client = server.available();

  if (client) {
    Serial.println("New Client.");
    String currentLine = "";
    String request = "";
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        if (c == '\n') {
          if (currentLine.length() == 0) {
            handleRequest(request);  // Handle the request
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            client.println("<!DOCTYPE html><html>");
            client.println("<head><title>Motor Control</title></head>");
            client.println("<body><h1>Motor Control</h1>");
            client.println("<form action=\"/\" method=\"get\">");
            client.println("<button name=\"direction\" value=\"forward\" type=\"submit\">Forward</button>");
            client.println("<button name=\"direction\" value=\"backward\" type=\"submit\">Backward</button>");
            client.println("<button name=\"direction\" value=\"stop\" type=\"submit\">Stop</button>");
            client.println("<br><br>");
            client.println("<label for=\"speed\">Speed (0-255):</label>");
            client.println("<input type=\"number\" id=\"speed\" name=\"speed\" min=\"0\" max=\"255\" value=\"128\">");
            client.println("<button type=\"submit\">Set Speed</button>");
            client.println("</form>");
            client.println("</body></html>");
            break;
          } else {
            if (request == "") {
              request = currentLine; // Capture the request line (GET /?direction=... HTTP/1.1)
            }
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }
    client.stop();
    Serial.println("Client Disconnected.");
  }
}

void connectToWiFi() {
  Serial.print("Connecting to ");
  Serial.println(ssid);
  while (WiFi.begin(ssid, pass) != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("Connected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

void handleRequest(String request) {
  int speed = 128;
  
  int directionIndex = request.indexOf("direction=");
  int speedIndex = request.indexOf("speed=");
  
  if (directionIndex != -1) {
    String direction = request.substring(directionIndex + 10, request.indexOf('&', directionIndex));
    
    if (speedIndex != -1) {
      String speedValue = request.substring(speedIndex + 6);
      speed = speedValue.toInt();
    }

    if (direction == "forward") {
      setMotorSpeedAndDirection(speed, "forward");
    } else if (direction == "backward") {
      setMotorSpeedAndDirection(speed, "backward");
    } else if (direction == "stop") {
      stopMotor();
    }
  }
}

void setMotorSpeedAndDirection(int speed, String direction) {
  if (direction == "forward") {
    digitalWrite(motorPin1, HIGH);
    digitalWrite(motorPin2, LOW);
  } else if (direction == "backward") {
    digitalWrite(motorPin1, LOW);
    digitalWrite(motorPin2, HIGH);
  }
  analogWrite(enablePin, speed);
}

void stopMotor() {
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  analogWrite(enablePin, 0);
}
